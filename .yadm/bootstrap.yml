---
- name: Bootstrap
  hosts: 127.0.0.1
  connection: local
  vars:
    keys:
      gpg:
        fingerprint: F5493B7F93725578FDD3D0B8A1BC8428323ECFE8
    packages:
      system:
        curl:
        gawk:
          Archlinux: awk
      linuxbrew:
        - bat
        - cargo-completion
        - direnv
        - diskus
        - doctl
        - dust
        - exa
        - exercism
        - fd
        - fselect
        - glances
        - go
        - gopass
        - hexyl
        - httpie
        - hub
        - hugo
        - hyperfine
        - just
        - lsd
        - lua
        - miniserve
        - node
        - rclone
        - ripgrep
        - rtv
        - sd
        - shellcheck
        - shfmt
        - sk
        - speedtest-cli
        - tealdeer
        - tokei
        - xsv
      flatpak:
        - com.slack.Slack
        - com.discordapp.Discord
        - com.github.johnfactotum.Foliate
        - com.skype.Client
        - com.valvesoftware.Steam
        - im.riot.Riot
        - net.lutris.Lutris
        - org.telegram.desktop
        - org.kde.kdenlive
        - org.kde.krita
        - uz.zoom.Zoom
      cargo:
        - ff-profile
  tasks:
    - name: Ensure critical system packages are installed
      tags: ensure, system
      become: true
      package:
        name: "{{ item.value[ansible_facts['os_family']] | default(item.key) }}"
      loop: "{{ packages.system|dict2items }}"
      loop_control:
        label: "{{ item.key }}"
    - name: yadm
      tags: yadm
      block:
        - name: Ensure gpg secret key is imported
          shell: gpg --list-secret-keys "{{ keys.gpg.fingerprint }}"
          changed_when: false
          register: gpg_secret_key_imported
        - name: Fail if gpg secret key is not imported
          fail:
            msg: Please import your GPG secret key if you want to use 'yadm decrypt'.
          when: gpg_secret_key_imported.rc != 0
        - name: yadm decrypt
          shell: yadm decrypt
          args:
            creates: ~/.yadm/.decrypted
    - name: Linuxbrew
      tags: brew
      block:
        - name: Ensure Linuxbrew is installed
          tags: ensure
          shell: curl https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh | sh
          args:
            creates: /home/linuxbrew/.linuxbrew
        - name: Update Linuxbrew and install necessary packages
          tags: long
          homebrew:
            update_homebrew: yes
            name: "{{ item }}"
            state: present
          loop: "{{ packages.linuxbrew }}"
    - name: Rust
      tags: rust
      block:
        - name: Ensure rustup is installed
          tags: ensure
          shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          args:
            creates: ~/.rustup
        - name: Install Rust toolchains
          tags: long
          shell: rustup install "{{ item }}"
          register: rustup_install
          changed_when: "'unchanged' not in rustup_install.stdout"
          loop:
            - stable
            - nightly
        - name: Install Cargo packages
          tags: long,cargo
          shell: cargo install "{{ item }}"
          register: cargo_install
          failed_when: cargo_install.rc not in [0, 101]
          changed_when: "'exists' not in cargo_install.stderr"
          loop: "{{ packages.cargo }}"
    - name: Set up Emacs
      tags: emacs
      block:
        - name: Clone doom-emacs
          tags: git,clone
          git:
            repo: ssh://git@gitlab.com/BrightOne/doom-emacs.git
            dest: ~/.emacs.d
            update: no
            accept_hostkey: yes
        - name: Install doom-emacs
          tags: long
          shell: bin/doom refresh
          register: install_doom_emacs
          args:
            chdir: ~/.emacs.d
          changed_when: "'No packages to install!' not in install_doom_emacs.stdout"
    - name: Clone passwords
      tags: git, clone
      git:
        repo: ssh://git@gitlab.com/BrightOne/passwords.git
        dest: ~/.password-store
        update: no
        accept_hostkey: yes
    - name: Set up zsh
      tags: zsh
      block:
        - name: Install zsh
          package:
            name: zsh
        - name: Set up antibody
          block:
            - name: Ensure ~/.local/bin exists
              shell: mkdir -p ~/.local/bin
              args:
                creates: ~/.local/bin
            - name: Install antibody
              shell: curl -sSf /tmp/antibody.sh | sh -s -- -b ~/.local/bin
              args:
                creates: ~/.local/bin/antibody
            - name: Bundle plugins
              tags: long
              shell: zsh -c "antibody bundle < ~/.zsh/plugins.txt |> ~/.zsh/plugins.zsh"
              args:
                creates: ~/.zsh/plugins.zsh
    - name: Set up flatpak
      tags: flatpak
      block:
        - name: Install flatpak
          package:
            name: flatpak
            state: present
        - name: Enable flathub remote
          flatpak_remote:
            name: flathub
            state: present
            flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
        - name: Install flatpaks
          tags: long
          flatpak:
            name: "{{ item }}"
          loop: "{{ packages.flatpak }}"
    - name: Set up asdf
      tags: asdf
      block:
        - name: Install asdf
          tags: git,clone
          git:
            repo: https://github.com/asdf-vm/asdf.git
            dest: ~/.asdf
            update: no
            version: v0.7.2
        - name: Get plugin names from ~/.tool-versions
          shell: awk '{print $1}' ~/.tool-versions
          changed_when: false
          register: asdf_plugin_names
        - name: Enable asdf plugins
          shell: asdf plugin-add "{{ item }}"
          loop: "{{ asdf_plugin_names.stdout_lines }}"
          register: asdf_plugin_add
          failed_when: asdf_plugin_add.rc not in [0, 2]
          changed_when: asdf_plugin_add.rc == 0
        - name: Run 'asdf install'
          tags: long
          shell: asdf install
    - name: Set up Firefox
      tags: firefox,app
      block:
        - name: Find default Firefox profile
          shell: ff-profile
          changed_when: false
          register: ff_profile
        - name: Link userChrome.css into the default profile
          file:
            src: "~/.yadm/link_sources/userChrome.css"
            dest: "{{ ff_profile.stdout }}/chrome/userChrome.css"
            state: link
# Local Variables:
# eval: (+ansible-yaml-mode 1)
# End:
